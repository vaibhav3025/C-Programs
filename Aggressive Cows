bool ispossible(vector<int> &stalls, int k, int mid)
{
    int cowcount = 1; //atleast one cow is there to begin with
    int previouspos = stalls[0]; //Initialize first cow's position
    for (int i = 1; i<stalls.size(); i++)
    {
        if(stalls[i]-previouspos >=mid)
        {
            cowcount++; //adding a cow or creating a new cow
            previouspos = stalls[i]; //placing this cow on arr[i]/stalls[i]
            if (cowcount == k)
            {
                return true;
            }
        }
    } return false;
}
int aggressiveCows(vector<int> &stalls, int k)
{   sort(stalls.begin(), stalls.end());
    int beg = 0;
    int end = -1;
    int ans = -1;
    for (int i =0;i<stalls.size(); i++)
    end = max(end,stalls[i]);
    int mid = beg +(end-beg)/2;
    while (beg<=end)
    {
        if (ispossible(stalls, k , mid))
        {
            ans = mid;
            beg = mid + 1; //To find the next bigger value while storing the mid value in ans iteratively
        }

        else{
            end = mid-1;
        }
        mid = beg + (end-beg)/2;
    } return ans;

}
